generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  name             String?
  password         String? // unneccessary for OAuth users
  image            String? // URL
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[] // OAuths
  transactions     Transaction[]
  events           Event[]
  participations   Participation[]
  userAchievements UserAchievement[]
  notificationPreferences UserNotificationPreference[]
}

model Account {
  id                String   @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  bankAmount         Float                @default(0)
  status             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             Int
  user               User                 @relation(fields: [userId], references: [id])
  participations     Participation[]
  endConditions      EventEndCondition[]
}

model Participation {
  id        Int      @id @default(autoincrement())
  deposit   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id               Int                    @id @default(autoincrement())
  name             String
  description      String?
  iconUrl          String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  criteria         AchievementCriterion[]
  userAchievements UserAchievement[]
}

model AchievementCriterion {
  id            Int                     @id @default(autoincrement())
  achievementId Int
  criteriaType  String
  criteriaValue Int
  description   String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  achievement   Achievement             @relation(fields: [achievementId], references: [id])
  userProgress  UserCriterionProgress[]
}

model UserAchievement {
  id            Int                     @id @default(autoincrement())
  userId        Int
  achievementId Int
  status        String
  unlockedAt    DateTime?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  achievement   Achievement             @relation(fields: [achievementId], references: [id])
  user          User                    @relation(fields: [userId], references: [id])
  progress      UserCriterionProgress[]

  @@unique([userId, achievementId])
}

model UserCriterionProgress {
  id                Int                  @id @default(autoincrement())
  userAchievementId Int
  criterionId       Int
  currentValue      Int                  @default(0)
  isCompleted       Boolean              @default(false)
  completedAt       DateTime?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  criterion         AchievementCriterion @relation(fields: [criterionId], references: [id])
  userAchievement   UserAchievement      @relation(fields: [userAchievementId], references: [id])

  @@unique([userAchievementId, criterionId])
}

model NotificationType {
  id              Int                          @id @default(autoincrement())
  name            String                       @unique
  description     String?
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  notifications   Notification[]
  userPreferences UserNotificationPreference[]
}

model NotificationChannel {
  id              Int                          @id @default(autoincrement())
  name            String                       @unique
  description     String?
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  deliveries      NotificationDelivery[]
  userPreferences UserNotificationPreference[]
}

model UserNotificationPreference {
  id                    Int                 @id @default(autoincrement())
  userId                Int
  notificationTypeId    Int
  notificationChannelId Int
  isEnabled             Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  notificationChannel   NotificationChannel @relation(fields: [notificationChannelId], references: [id], onDelete: Cascade)
  notificationType      NotificationType    @relation(fields: [notificationTypeId], references: [id], onDelete: Cascade)
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationTypeId, notificationChannelId])
}

model Notification {
  id                 Int                    @id @default(autoincrement())
  title              String
  content            String
  notificationTypeId Int
  referenceId        String?
  referenceType      String?
  isRead             Boolean                @default(false)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  notificationType   NotificationType       @relation(fields: [notificationTypeId], references: [id])
  deliveries         NotificationDelivery[]
}

model NotificationDelivery {
  id                    Int                 @id @default(autoincrement())
  notificationId        Int
  notificationChannelId Int
  userId                Int
  status                String
  sentAt                DateTime?
  failureReason         String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationChannel   NotificationChannel @relation(fields: [notificationChannelId], references: [id], onDelete: Cascade)
  notification          Notification        @relation(fields: [notificationId], references: [id], onDelete: Cascade)
}

model EventEndCondition {
  id             Int            @id @default(autoincrement())
  eventId        Int
  isCompleted    Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  event          Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  conditions     EndCondition[]
}

model EndCondition {
  id                  Int               @id @default(autoincrement())
  endConditionId      Int
  parameterName       String
  operator            String
  value               String
  isCompleted         Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  eventEndCondition   EventEndCondition @relation(fields: [endConditionId], references: [id], onDelete: Cascade)
}
