{
  "auth": {
    "login": {
      "success": "Успешный вход в систему",
      "error": "Ошибка входа",
      "invalidCredentials": "Неверный email или пароль",
      "fieldsRequired": "Email и пароль обязательны",
      "otherAuthMethod": "Этот аккаунт использует другой метод аутентификации"
    },
    "register": {
      "success": "Регистрация успешно завершена!",
      "error": "Ошибка регистрации",
      "fieldsRequired": "Имя, email и пароль обязательны",
      "userExists": "Пользователь с таким email уже существует"
    },
    "middleware": {
      "authRequired": "Необходима авторизация",
      "invalidToken": "Недействительный или просроченный токен",
      "serverError": "Внутренняя ошибка сервера"
    }
  },
  "user": {
    "create": {
      "success": "Пользователь успешно создан",
      "error": "Не удалось создать пользователя",
      "fieldsRequired": "Email и пароль обязательны",
      "userExists": "Пользователь с таким email уже существует"
    },
    "update": {
      "success": "Пользователь успешно обновлен",
      "error": "Не удалось обновить пользователя",
      "userExists": "Пользователь с таким email уже существует",
      "notFound": "Пользователь не найден"
    },
    "delete": {
      "success": "Пользователь успешно удален",
      "error": "Не удалось удалить пользователя",
      "notFound": "Пользователь не найден"
    },
    "get": {
      "error": "Не удалось получить пользователя",
      "notFound": "Пользователь не найден"
    },
    "getAll": {
      "error": "Не удалось получить список пользователей"
    }
  },
  "event": {
    "create": {
      "success": "Событие успешно создано",
      "error": "Не удалось создать событие",
      "fieldsRequired": "ID пользователя, название и статус обязательны",
      "userNotFound": "Пользователь не найден"
    },
    "update": {
      "success": "Событие успешно обновлено",
      "error": "Не удалось обновить событие",
      "notFound": "Событие не найдено"
    },
    "delete": {
      "success": "Событие успешно удалено",
      "error": "Не удалось удалить событие",
      "notFound": "Событие не найдено"
    },
    "get": {
      "error": "Не удалось получить событие",
      "notFound": "Событие не найдено"
    },
    "getAll": {
      "error": "Не удалось получить список событий"
    },
    "getUserEvents": {
      "error": "Не удалось получить события пользователя",
      "userNotFound": "Пользователь не найден"
    }
  },
  "transaction": {
    "create": {
      "success": "Транзакция успешно создана",
      "error": "Не удалось создать транзакцию",
      "fieldsRequired": "ID пользователя и сумма обязательны",
      "userNotFound": "Пользователь не найден"
    },
    "getUserTransactions": {
      "error": "Не удалось получить транзакции пользователя",
      "userNotFound": "Пользователь не найден"
    },
    "get": {
      "error": "Не удалось получить транзакцию",
      "notFound": "Транзакция не найдена"
    },
    "getAll": {
      "error": "Не удалось получить список транзакций"
    },
    "getUserBalance": {
      "error": "Не удалось рассчитать баланс пользователя",
      "userNotFound": "Пользователь не найден"
    }
  },
  "participation": {
    "create": {
      "success": "Участие успешно создано",
      "error": "Не удалось создать участие",
      "fieldsRequired": "ID пользователя, ID события и депозит обязательны",
      "userNotFound": "Пользователь не найден",
      "eventNotFound": "Событие не найдено",
      "insufficientFunds": "Недостаточно средств"
    },
    "getUserParticipations": {
      "error": "Не удалось получить список участий пользователя",
      "userNotFound": "Пользователь не найден"
    },
    "getEventParticipations": {
      "error": "Не удалось получить список участников события",
      "eventNotFound": "Событие не найдено"
    },
    "get": {
      "error": "Не удалось получить информацию об участии",
      "notFound": "Участие не найдено"
    },
    "delete": {
      "error": "Не удалось удалить участие",
      "notFound": "Участие не найдено",
      "success": "Участие успешно удалено"
    },
    "increaseDeposit": {
      "error": "Не удалось увеличить депозит",
      "notFound": "Участие не найдено",
      "amountRequired": "Необходимо указать сумму для увеличения",
      "insufficientFunds": "Недостаточно средств",
      "success": "Депозит успешно увеличен"
    }
  },
  "notificationType": {
    "getAll": {
      "error": "Ошибка при получении типов уведомлений"
    },
    "get": {
      "notFound": "Тип уведомления не найден",
      "error": "Ошибка при получении типа уведомления"
    },
    "create": {
      "nameRequired": "Название типа уведомления обязательно",
      "nameExists": "Тип уведомления с таким именем уже существует",
      "error": "Ошибка при создании типа уведомления"
    },
    "update": {
      "nameRequired": "Название типа уведомления обязательно",
      "notFound": "Тип уведомления не найден",
      "nameExists": "Тип уведомления с таким именем уже существует",
      "error": "Ошибка при обновлении типа уведомления"
    },
    "delete": {
      "success": "Тип уведомления успешно удален",
      "notFound": "Тип уведомления не найден",
      "error": "Ошибка при удалении типа уведомления"
    }
  },
  "notificationChannel": {
    "getAll": {
      "error": "Ошибка при получении каналов уведомлений"
    },
    "get": {
      "notFound": "Канал уведомления не найден",
      "error": "Ошибка при получении канала уведомления"
    },
    "create": {
      "nameRequired": "Название канала уведомления обязательно",
      "nameExists": "Канал уведомления с таким именем уже существует",
      "error": "Ошибка при создании канала уведомления"
    },
    "update": {
      "nameRequired": "Название канала уведомления обязательно",
      "notFound": "Канал уведомления не найден",
      "nameExists": "Канал уведомления с таким именем уже существует",
      "error": "Ошибка при обновлении канала уведомления"
    },
    "delete": {
      "success": "Канал уведомления успешно удален",
      "notFound": "Канал уведомления не найден",
      "error": "Ошибка при удалении канала уведомления"
    }
  },
  "preference": {
    "getAll": {
      "error": "Ошибка при получении настроек уведомлений пользователя"
    },
    "get": {
      "notFound": "Настройка уведомления не найдена"
    },
    "set": {
      "fieldsRequired": "ID типа уведомления и канала уведомления обязательны",
      "error": "Ошибка при установке настройки уведомления"
    },
    "getStatus": {
      "error": "Ошибка при получении статуса настройки уведомления"
    },
    "delete": {
      "success": "Настройка уведомления успешно удалена",
      "error": "Ошибка при удалении настройки уведомления"
    },
    "init": {
      "success": "Настройки уведомлений пользователя успешно инициализированы",
      "error": "Ошибка при инициализации настроек уведомлений пользователя"
    }
  },
  "notification": {
    "getAll": {
      "error": "Ошибка при получении уведомлений пользователя"
    },
    "get": {
      "notFound": "Уведомление не найдено",
      "error": "Ошибка при получении уведомления"
    },
    "create": {
      "fieldsRequired": "Все обязательные поля должны быть заполнены (заголовок, содержание, тип уведомления, ID пользователей)",
      "success": "Уведомление успешно создано",
      "error": "Ошибка при создании уведомления"
    },
    "markRead": {
      "error": "Ошибка при отметке уведомления как прочитанное"
    },
    "markAllRead": {
      "success": "Все уведомления отмечены как прочитанные",
      "error": "Ошибка при отметке всех уведомлений как прочитанных"
    },
    "delivery": {
      "get": {
        "notFound": "Доставка уведомления не найдена"
      },
      "update": {
        "statusRequired": "Статус доставки обязателен",
        "error": "Ошибка при обновлении статуса доставки"
      }
    }
  }
} 